What this Folder covers

1. Basic data structures
2. Big O Notation
3. Searching Algorithms
4. Sorting Algorithms
5. Graphs
6. Trees

Q Whats a data structure?
- A named location that can be used to store and organize data
- Example, a family tree is a hierarchy of family relationships.
- Example 2, an array is a collection of elements stored at contiguous memory locations. 

Q Whats an algorithm?
- A collection of steps to solve a problem
- Ex. Im hungry, so I preheat the oven, knead my pizza dough, add toppings, bake the pizza, etc.
- Ex, a linear search. one by one, examine the elements of an array to find a value.

Q Why DSA?
- Write code thats time and memory efficient.

STACKS
------------------------------------
What is a stack?
- LIFO data structure (Last-In, First-Out)
- Stores objects into a sort of "vertical tower"
- Push() to add to the top
- Pop() to remove from the top
- Peek() to look at the top

What value is a top of a stack?
- Always 1 then it goes up. First item added is the last element. (ig 5 items in stack, first added is 5)
- Doesn't start at 0
- Returns -1 if search doesn't find item in stack.

Can stacks run out of memory?
- Yes, if you add too many items it can run out memory

What are some uses of stacks?
- Undo/redo features in text editors
- Move back and forth through browser history
- Backtracking algorithms (maze, file directories)
- Calling functions (call stack)


QUEUES
-----------------------------------------
What is a queue?
- FIFO data structures (First in, First Out)
- A collection designed for holding elements prior to processing
- Linear data structure
- Ex. think of a check out line

What are some queue methods?
- Adding = enqueue, offer()
- Removing = dequeue, poll()
- Look at head of queue (first element) = peek()

What do you need in order to instantiate a queue?
- A linked list because instantiating a queue is not allowed due to interface issues.
- Import java.util.Queue and LinkedList
- Ex. Queue<String> queue = new LinkedList<String>();

What do both the queue and stack classes inherit? 
- The collections class
- This means stuff like isEmpty(), size(), contains() works

Why are queues useful?
- Keyboard buffer (letters should appear on the screen in the order they're pressed)
- Printer queue (Print jobs should be completed in order)
- Used in linkedlists, priorityqueues, breadth-first search

PRIORITY QUEUES
--------------------------------------
What is a Priority queue?
- FIFO data structure (First In First Out)
- Serves elements with higher priority first before elements with lower priority (sorting)

What do you need in order to instantiate a PRIORITY queue?
- PriorityQueue class, not a LinkedList found in a regular queue.
- WRONG = Queue<String> queue = new LinkedList<String>();
- CORRECT = Queue<Double> queue = new PriorityQueue<Double>();
- Implement java.util.PriorityQueue

How can you reverse a priority queue?
- use a comparator in the instantiating code.
- Collections.reverseOrder()
- ex. Queue<Double> queue = new PriorityQueue<Double>(Collections.reverseOrder());

How does Priority queue work for numbers and strings?
- Sorts them from lowest to highest and from A-Z alphabetically
- reverseOrder() does the opposite for both.

LINKED LISTS
--------------------------------------
Whats the advantages or disadvantages of ArrayLists vs LinkedLists?
- ArrayList is linear memory collection. 
- ArrayList will be slow when inserting or deleting if large size (ex. 1 million elements) because elements need to shift left or right.
- LinkedLists solve this issue by containing no indexes and storing data in pairs with their data and address in memory (ex. "Tyler's House", "101 Help Blvd")
- LinkedLists nodes are non-continous, so they can be anywhere in memory. But each node knows where the next one is.
- The end node of a linked list is Null.
- LinkedLists are bad at searching (they must start at the head and keep going through nodes to the tail)

Inserting and Deleting in LinkedLists
- Inserting is simple, you just take address of previous node and assign it the address of the new node so our new node is
pointing to the next node in line and take the address in the previous node and replace it with our new node. It's a chain. No shifting required unlike ArrayLists.
- Deleting is simple, just delete the node and make the previous node point to the next node in line (the one after the one you wish to delete)

Doubly LinkedLists vs Singly LinkedList?
- A doubly linkedlists requires two addresses per node, so more memory used. Unlike singly which only uses one address per node.
- Doubly linkedlists have bidirectional traversal, meaning you can search from tail to head or head to tail.

What are some methods of LinkedLists?
- ADD = offerFirst(), offerLast()
- REMOVE = pollFirst(), pollLast()
- LOOK = peekFirst(), peekLast()
- push(), pop() (stacks)
- offer(), poll() (queues)
- indexOf()

What else can you treat LinkedLists as?
- A stack. LIFO (Last in, first out), uses push and pop
- Ex. linkedlist.pop() would remove the last element added. 
- A queue. FIFO (First in, first out), uses offer and poll.
- ex. linedlist.offer() would add an element to the tail.

What is a Linked List?
- A data structure that stores nodes in 2 parts (data + address)
- Nodes are non-consecutive in memory locations and elements are linked using pointers

Advantages of a Linked List?
- Dynamic data structure (allocates needed memory while running)
- Insertion and Deletion of nodes is easy. O(1) time complexity
- No/Low memory waste

disadvantages of a linked list?
- Greater memory usage (additional pointer)
- No random access of elements (no index[i])
- accessing/searching elements is more time consuming O(n)

What are some uses of linked lists?
- Implement stacks/queues
- GPS navigation
- Music playlist

Dynamic Arrays
--------------------------------------
What the heck are Dynamic arrays?
- Also known as ArrayLists in java, Arrays in Javascript.
- A resizable array that allows elements to be added or removed once compiled.

What are some advantages of Dynamic arrays?
- Random access of elements O(1)
- Good locality of reference and data cache utilization
- Easy to insert/delete at the end.

What are some disadvantages of Dynamic arrays?
- Wastes more memory than a linked list.
- Shifting elements is time consuming, O(n)
- Expanding/Shrinking the array is time consuming, O(n)

What collection can you use for dynamic arrays?
- ArrayList. instantiate it with that

Big O Notation
----------------------------
What is Big O Notation?
- Describes the performane of an algorithm as the amount of data increases
- Machine independent (# of steps to completion)
- Ignore smaller operatiors O(n+1) -> O(n)
- n = amount of data, like x

Example of O(n) linear code
- int addUp(int n){
    int sum = 0;
    for(int i = 0; i <= n; i++){
        sum += i;
    }
    return sum;
}
- goes through the for loops n amount of times.
- n = 1000000, then a million steps

Example of O(1) constant time code
- int addUp(int n){
    int sum = n * (n+1) / 2'
    return sum;
}
- n = 1000000,  that means 3 steps, O(1)

Big O Notation all parts (fastest to slowest)
- O(1) = Constant Time (IDEAL)
    * Random access of an element in an array  
    * Inserting at the beginning of linkedlist
- O(log n) = Logarithmic Time (GREAT)
    * Binary search
    * As data size increases, this is more efficient.
- O(n) = Linear Time (GOOD)
    * Looping through elements in an array
    * Searching through a LinkedList
- O(n log n) = Quasilinear time (EH)
    * Quicksort
    * Mergesort
    * Heapsort
    * Slow with larger data sets
- O(n^2) = Quadratic Time (REALLY?... try again)
    * Insertion sort
    * Selection sort
    * Bubblesort
- O(n!) = Factorial time (ARE YOU SERIOUS BRUH?)
    * Traveling salesman problem
    * Extremely slow, never use.

LINEAR Searching
-----------------------------
Whats a linear search?
- An iteration of a collection one element at a time. It has a O(n) complexity

Advantages and Disadvantages of linear searches?
- Advantages
    * Fast for searches of small to medium data sets
    * Does not need to be sorted
    * Useful for data structures that do not have random access (Linked List)
- Disadvantages
    * Slow for large data sets 

BINARY Searching
-----------------------------
What is a binary search? How does it work?
- Search algorithm that finds the position of a target value within a SORTED array.
- Half the array is eliminated during each step of searching until only 1 element remains, the target value.
- Always begins in the middle then compares if target value is greater or less than the middle value and deletes one side of the array. This is repeated.
- The time complexity of binary search is O(log n).

Interpolation Searching
-----------------------------
What is an interpolation search?
- An improved version of binary search that works on a sorted, uniformly distributed array.
- It calculates the position of the target value by using a formula.
- If formula is incorrect, search area is reduced and the formula is recalculated.

What is probing in interpolation search?
- Probing refers to searching for a target value in a sorted array.

Best and Worst case of interpolation search?
- Best is O(log (log n)) on average.
- Worst case is O(n) if the array is not uniformly distributed.

What can you use interpolation search for?
- Searching in databases
- Searching in arrays
- Searching in data structures


Bubble Sort
-----------------------------
What is a bubble sort?
- A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.
- The pass through the list is repeated until the list is sorted.
- Usually involves a temp variable to swap elements.
- Think of buoyancy of objects in water, bubbles (light object) rise to the top, heavy objects sink to the bottom.

What is the time complexity of bubble sort (Best and Worst)?
- O(n^2) in the worst case scenario.
- O(n) in the best case scenario.
- Small data sets are ideal for bubble sort.
- Not ideal for large data sets.

Selection Sort
-----------------------------
What is a selection sort?
- A simple sorting algorithm that takes the smallest (min) element and swaps it with the first element in an iteration and repeats this process until the list is sorted.
- Once a number is sorted, it is not touched again.

What is the time complexity of selection sort?
- O(n^2) in the worst case scenario.
- O(n^2) in the best case scenario.
- Not ideal for large data sets.


Insertion Sort
-----------------------------
What is an insertion sort?
- Algorithm that sorts elements by looking at elements to the left of an index. If the element to the left is greater than the current element, it swaps their positions.
- Greater elements are shifted to the right and smaller elements are shifted to the left.
- It repeats this process until the list is sorted.

What is the time complexity of insertion sort?
- O(n^2) in the worst case scenario.
- O(n) in the best case scenario.
- Ideal for small data sets.
- Better than bubble and selection sort.

Recursion
-----------------------------
What is recursion? Give some examples.
- When a thing is defined in terms of itself or of its type.
- A function that calls itself. Can be a substitute for iteration.
- Dividing a problem into smaller subproblems and solving them.
- Ex. Factorial of a number, Fibonacci sequence, Tower of Hanoi, Merge sort, Quick sort.

Advantages and Disadvantages of recursion?
- Advantages
    * Simplifies complex problems
    * Reduces time complexity
    * Easier to read and understand
    * Easier to debug
- Disadvantages
    * Consumes more memory
    * Slower than iteration

What is the base case in recursion?
- The condition that stops the recursion from continuing.
- Ex. if(n == 0) return 1;

What is a call stack in recursion?
- A stack data structure that stores information about the active subroutines of a computer program.
- Stacks are LIFO (Last in, first out)
- Ex. When a function calls itself, the function is pushed onto the stack and when the function returns, it is popped off the stack.

What can you use recursion for?
- Factorial of a number
- Fibonacci sequence
- Tower of Hanoi
- Merge sort
- Quick sort

Merge Sort
-----------------------------
What is a merge sort?
- A sorting algorithm involving recursion that divides arrays into halves again and again until they are single arrays and then sorts them and 
merges the halves back together until the entire array is sorted.
- Ex. [38, 27, 43, 3, 9, 82, 10] -> [38, 27, 43] [3, 9, 82, 10] -> [38] [27, 43] [3, 9] [82, 10] -> [27, 38, 43] [3, 9, 10, 82] -> [3, 9, 10, 27, 38, 43, 82]

What is the time complexity of merge sort?
- O(n log n) in all cases.
- Uses O(n) for sorting space.
- Ideal for large data sets.

What can you use a merge sort for?
- Sorting large data sets
- Sorting arrays
- Sorting linked lists

Quick Sort
-----------------------------
What is a quick sort?
- A sorting algorithm that uses the divide and conquer method to sort elements.
- It selects a pivot element and partitions the other elements into two sub-arrays according to whether they are less than or greater than the pivot.
- The sub-arrays are then sorted recursively.


What is the time complexity of quick sort?
- O(n^2) in the worst case scenario.
- O(n log n) in the best case scenario.
- Ideal for large data sets.

What is a pivot for Quick Sorts?
- The pivot is the element that is used to divide the array into two sub-arrays.
- The pivot is usually the last element in the array.

What can you use a quick sort for?
- Sorting large data sets
- Sorting arrays
- Sorting linked lists



Hash Tables
-----------------------------
What is a hash table?
- A data structure that implements an associative array abstract data type, a structure that can map keys to values.
- Uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.
- Consists of pairs of keys and values which are known as entries.
- Fast insertion, look up, deletion of key/value pairs. 
- Ideal for large data sets.

How do you get a hash code?
- Use the hashCode() method in Java.
- Ex. String s = "Hello"; s.hashCode();
- You take an integer(key), hashCode() spits it into a formula, and you get another integer, a hash code. 
- A hash code is usually the key itself, but it can be different. (Ex. "100" -> 100)

How does a hash table stores elements into indexes (buckets)?
- It takes the hash code and divides each by the capacity of the array (i.e 10 elements allowed) and stores the remainder as the index.
- Ex. 100 % 10 = 0, 101 % 10 = 1, 102 % 10 = 2, etc.
- If you have a number, the remainder is usually the last digit. (Ex. 123 % 10 = 3)

What is a collision in a hash table?
- A collision occurs when two different keys hash to the same index in the array.

How do you handle collisions in a hash table?
- Separate chaining (linked lists)
- Open addressing (linear probing, quadratic probing, double hashing)
- Basically, with collisions, the addresses of both keys are stored in the same index (bucket) but are used as a LinkedList
and if you want to search for a key, you go to the index, then search through the linked list linearly.
- Ideally, you would want each pair into their own index (bucket) for efficiency.

What is the time complexity of a hash table?
- O(1) in the best case scenario.
- O(n) in the worst case scenario.
- Ideal for large data sets.

How do you instantiate a Hash Table?
- Use the HashMap class in Java.
- Ex. HashMap<String, Integer> map = new HashMap<String, Integer>();

What are some methods of a hash table and what do they do?
- PUT = put(key, value) - Adds a key-value pair to the map
- GET = get(key) - Returns the value to which the specified key is mapped
- REMOVE = remove(key) - Removes the mapping for a key from this map if it is present
- CONTAINS = containsKey(key) - Returns true if this map contains a mapping for the specified key
- SIZE = size() - Returns the number of key-value pairs in the map
- CLEAR = clear() - Removes all of the mappings from this map
- KEYSET = keySet() - Returns a set view of the keys contained in this map
- VALUES = values() - Returns a collection view of the values contained in this map
- ENTRYSET = entrySet() - Returns a set view of the mappings contained in this map
- CONTAINSVALUE = containsValue(value) - Returns true if this map maps one or more keys to the specified value

What can you use a hash table for?
- Databases
- Caches
- Sets
- Maps
- Counters

Graphs Intro
-----------------------------
What does a graph consist of?
- A set of nodes (vertices or points) and a set of edges (lines or arcs) that connect the nodes.
- A graph can be directed or undirected.
- Ex. of a directed graph, a one way street. Ex. of an undirected graph, a two way street.

What is adjaceny in a graph?
- A vertex is said to be adjacent to another vertex if there is an edge connecting them.

Difference between directed and undirected graphs?
- Directed graphs have edges with a direction. (Ex. A -> B) to determine adjacency, you only need to check A.
- Undirected graphs have edges without a direction. (Ex. A - B) to determine adjacency, you must check both A and B.

What are two ways to show graphs in programming?
- Adjacency matrix (2D array)
- Adjacency list (array of linked lists)

Explain 0's and 1's in an adjacency matrix?
- A 0 represents no edge between the vertices.
- A 1 represents an edge between the vertices.

What is the time complexity of an adjacency matrix?
- O(1) to add or remove an edge.
- O(v^2) to search for an edge.

What is the time complexity of an adjacency list?
- O(V) for time. V = number of vertices
- O(V+E) for space. E = number of edges

What can graphs be used for?
- Social networks
- GPS navigation
- Computer networks
- Internet search engines
- Recommendation systems

Adjancey matrix
-----------------------------
What is an adjacency matrix?
- A 2D array to store 1's/0's to represent edges.
- # of rows = # of unique nodes
- # of columns = # of unique nodes

Adjacency List
-----------------------------
What is an adjacency list?
- An array/arraylist of linkedlists
- Each linkedlist has unique node at the head
- All adjacent neighbors to that node are added to that node's linkedlist


Depth First Search
-----------------------------
What is a depth first search?
- A search algorithm for traversing a tree or graph data structure.

How does depth first search work?
- Pick a root, keep going until you reach a dead end, or a previously visited node, then backtrack to last node that has
unvisited adjacent neighbors.
- Ex. think of a maze, you keep going until you reach a dead end, then you backtrack to the last intersection and try a different path.
- Uses a stack to keep track of nodes.

What is the time complexity of depth first search?
- O(V+E) for time. V = number of vertices, E = number of edges
- O(V) for space. V = number of vertices

What can you use depth first search for?
- Topological sorting
- Strongly connected components
- Solving puzzles with only one solution
- Path finding


Breadth First Search
-----------------------------
What is a breadth first search?
- A search algorithm for traversing a tree or graph data structure. 
- Done one "level" at a time, rather than one branch at a time.

How does breadth first search work?
- Start at the root, then visit all the nodes at the present depth before moving on to the nodes at the next depth level.
- Uses a queue to keep track of nodes.

What is the time complexity of breadth first search?
- O(V+E) for time. V = number of vertices, E = number of edges
- O(V) for space. V = number of vertices

What can you use breadth first search for?
- Shortest path problems
- Minimum spanning tree
- Web crawlers
- Social networks

Depth First Search vs Breadth First Search
- DFS uses a stack, BFS uses a queue
- DFS is recursive, BFS is iterative
- BFS = traverse a graph level by level, uses a queue, better if destination is on average close to the start, and siblings are visited before children.
- DFS = traverse a graph branch by branch, uses a stack, better if destination is on average far from the start, and children are visited before siblings.

Trees
-----------------------------
What is a tree?
- A nonlinear data structure where nodes are organized in a hierarchy
- A tree has a root, branches, and leaves, parent and child nodes
- A tree is a connected graph without cycles
- Ex. Family tree, file directory, HTML DOM

What is a subtree?
- A tree within a tree

What is depth and height of a tree?
- Depth = The number of edges from the root to the node
- Height = The number of edges from the node to the deepest leaf

Binary Trees
-----------------------------
What is a binary tree?
- A tree where each node has at most two children, left and right
- A node is called a leaf if it has no children
- A binary tree is either empty or consists of a root and two disjoint binary trees called the left subtree and the right subtree.

How are nodes arranged in a binary tree?
- The left subtree of a node contains only nodes with keys less than the node's key
- The right subtree of a node contains only nodes with keys greater than the node's key
- Ex. 5 is the root, 3 is the left child, 7 is the right child, 2 is the left child of 3, 4 is the right child of 3, 6 is the left child of 7, 8 is the right child of 7.

What is the time complexity of a binary tree?
- O(log n) for time. n = number of nodes
- O(n) for space. n = number of nodes

What can you use a binary tree for?
- Expression trees
- Binary search trees
- Huffman coding
- AVL trees
- Red-Black trees

Tree traversal
-----------------------------
what is tree traversal?
- The process of visiting (checking and/or updating) each node in a tree data structure, exactly once.

3 Types of tree traversal
- Inorder (Left, Root, Right)
- Preorder (Root, Left, Right)
- Postorder (Left, Right, Root)

What is Inorder Traversal?
- Traverse the left subtree
- Visit the root
- Traverse the right subtree

What is Preorder Traversal?
- Visit the root
- Traverse the left subtree
- Traverse the right subtree

What is Postorder Traversal?
- Traverse the left subtree
- Traverse the right subtree
- Visit the root

What might be the uses of the three types of tree traversal?
- Inorder = print a sorted list of elements
- Preorder = create a copy of the tree
- Postorder = delete the tree